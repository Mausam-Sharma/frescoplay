#_______________________________ Kubernetes Sample Problem 1 ___________________________________________

#Step 1 

kubectl run firstapp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080
kubectl get pod firstapp


#Step 2

kubectl create service nodeport firstapp --tcp 8080:8080 --dry-run=client -o yaml > firstapp.yaml
kubectl apply -f firstapp.yaml 
kubectl get svc firstapp

#firstapp.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: firstapp
  name: firstapp
spec:
  ports:
  - name: 8080-8080
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: firstapp
  type: NodePort
status:
  loadBalancer: {}


#Step 3

kubectl create deployment nginx --image=nginx --dry-run=client -o yaml > deployment.yaml
kubectl apply -f deployment.yaml
kubectl get deployment nginx

#deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: nginx
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx
        name: nginx
        resources: {}
status: {}


#Step 4

kubectl create service nodeport nginx-svc --tcp 8080:8080 --dry-run=client -o yaml > service.yaml
kubectl apply -f service.yaml
kubectl get svc nginx-svc

#service.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: nginx-svc
  name: nginx-svc
spec:
  ports:
  - name: 8080-8080
    port: 8080
    protocol: TCP
    targetPort: 8080
    nodePort: 30080
  selector:
    app: nginx-svc
  type: NodePort
status:
  loadBalancer: {}
  
  
#Step 5

kubectl get pods

# We get this pod name nginx-7854ff8877-pb2mx from above get pods command , change this pod name in below commands
kubectl exec nginx-7854ff8877-pb2mx -it -- sh -c "echo 'Welcome to fresco nginx pod' > /usr/share/nginx/html/index.html"

# This verifies the content we just added inside pod in previous command
kubectl exec nginx-7854ff8877-pb2mx -it -- sh -c "cat /usr/share/nginx/html/index.html"




#_______________________________ Kubernetes Sample Problem 2___________________________________________
minikube start
minikube -p minikube docker-env
eval $(minikube docker-env)

# ___________________ Configmaps ____________

#Step 1

kubectl create configmap fresco-config --dry-run=client -o yaml > configMap.yaml
kubectl apply -f configMap.yaml
kubectl get configmaps


#configMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: fresco-config
data:
  SERVER_URL: https://www.fresco.me
  

#Step 2
kubectl run fresco-nginx-pod --image=nginx --dry-run=client -o yaml > pod.yaml
kubectl apply -f pod.yaml
kubectl get pods
kubectl exec -it fresco-nginx-pod -- sh -c env | grep SERVER_URL_ENV

#pod.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: fresco-nginx-pod
  name: fresco-nginx-pod
spec:
  containers:
  - image: nginx
    name: fresco-nginx-pod
    env:
    - name: SERVER_URL_ENV
      valueFrom:
        configMapKeyRef:
          name: fresco-config
          key: SERVER_URL
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}


# ___________________ Secrets  ____________

#Step 1

kubectl create secret generic fresco-secret --dry-run=client -o yaml > secret.yaml
echo -n "admin" | base64
echo -n "pass" | base64 
kubectl apply -f secret.yaml
kubectl get secrets

#secret.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  name: fresco-secret
data:
  user: YWRtaW4=
  pass: cGFzcw==



# Step 2

# Firstly, Update pod.yaml
kubectl delete pod fresco-nginx-pod
kubectl get pods
kubectl apply -f pod.yaml
kubectl get pods
kubectl exec -it fresco-nginx-pod -- sh -c "cat /etc/test/* "


#pod.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: fresco-nginx-pod
  name: fresco-nginx-pod
spec:
  containers:
  - image: nginx
    name: fresco-nginx-pod
    env:
    - name: SERVER_URL_ENV
      valueFrom:
        configMapKeyRef:
          name: fresco-config
          key: SERVER_URL
    volumeMounts:               # Add volumeMounts section
    - name: secret-volume       # Name of the volume
      mountPath: /etc/test      # Mount path in the container
  volumes:                     # Add volumes section
  - name: secret-volume         # Name of the volume
    secret:
      secretName: fresco-secret  # Name of the Secret
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}


# ___________________  Persistence Volume  ____________

# Step 1

kubectl apply -f pv.yaml

#pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: fresco-pv
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/fresco
    
# Step 2

kubectl apply -f pvc.yaml

#pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fresco-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Mi

# Step 3
      
kubectl apply -f pod.yaml

#pod.yaml      
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: fresco-nginx-pod
  name: fresco-nginx-pod
spec:
  containers:
  - image: nginx
    name: fresco-nginx-pod
    env:
    - name: SERVER_URL_ENV
      valueFrom:
        configMapKeyRef:
          name: fresco-config
          key: SERVER_URL
    volumeMounts:               # Add volumeMounts section
    - name: fresco-secret       # Name of the volume
      mountPath: "/etc/test"      # Mount path in the container
      readOnly: true
    - name: fresco-volume
      mountPath: /usr/share/nginx/html
  volumes:                     # Add volumes section
  - name: fresco-secret          # Name of the volume
    secret:
      secretName: fresco-secret  # Name of the Secret
  - name: fresco-volume
    persistentVolumeClaim:
      claimName: fresco-pvc
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

# Step 4 : Verify
        
kubectl get pvc fresco-pvc


------------------------------------------------ RBAC ------------------------------------------------

Create a Namespace named dev:
kubectl create namespace dev


Create a Private Key using OpenSSL:
openssl genrsa -out emp.key 2048


Then, generate the CSR using the configuration:
openssl req -new -key emp.key -subj "/CN=emp/O=dev" -out emp.csr


Generate emp.crt by approving the CSR:

You'll need to approve the CSR using the kubectl certificate approve command. However, :
since Minikube doesn't have a CertificateSigningRequest controller enabled by default, :
you won't be able to do this directly:

Instead, you can self-sign the CSR to generate the certificate emp.crt:
This command signs the CSR using the minikube default key and generates the certificate emp.crt:


openssl x509 -req -in emp.csr -CA ${HOME}/.minikube/ca.crt -CAkey ${HOME}/.minikube/ca.key  -CAcreateserial -out emp.crt -days 45


Set credentials for the emp user:

You should already have the emp.key and emp.crt files generated earlier. Now, set the credentials for the emp user:

kubectl config view

kubectl config set-credentials emp --client-certificate emp.crt --client-key emp.key

kubectl config view


Create a new Context pointing to the cluster minikube:
kubectl config set-context dev-ctx --cluster=minikube --namespace=dev --user=emp

kubectl config view


Create a Role named emp-role:

Create a file named emp-role.yaml with the following content:

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: emp-role
  namespace: dev
rules:
- apiGroups: [""]
  resources: ["pods","deployments"]
  verbs: ["get", "list"]

Apply this Role using:
kubectl apply -f emp-role.yaml


Bind emp user to the emp-role Role:

Create a file named emp-bind.yaml with the following content:

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: emp-bind
  namespace: dev
subjects:
- kind: User
  name: emp
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: emp-role
  apiGroup: rbac.authorization.k8s.io
  

Apply this RoleBinding using:
kubectl apply -f emp-bind.yaml


Run an nginx Pod under the dev-ctx and dev namespace with name nginx:

Use the following Pod definition in a file named nginx-pod.yaml:

apiVersion: v1
kind: Pod
metadata:
  name: nginx
  namespace: dev
spec:
  containers:
  - name: nginx
    image: nginx
    
    
kubectl apply -f nginx-pod.yaml


Verify the deployment:

Run the following command to ensure the nginx Pod is deployed:

kubectl --context=dev-ctx get pods -o wide


This command should show the nginx Pod deployed in the dev namespace under the dev-ctx context:

Verify access control:

kubectl --context=dev-ctx get pods -n default

Error from server (Forbidden): pods is forbidden: User "emp" cannot list resource "pods" in API group "" in the namespace "default"





